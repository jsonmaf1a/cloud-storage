/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ProtectedImport } from './routes/_protected'
import { Route as AuthConfirmEmailImport } from './routes/auth/confirm-email'

// Create Virtual Routes

const ProtectedIndexLazyImport = createFileRoute('/_protected/')()
const AuthRegisterLazyImport = createFileRoute('/auth/register')()
const AuthLoginLazyImport = createFileRoute('/auth/login')()
const ProtectedTrashLazyImport = createFileRoute('/_protected/trash')()
const ProtectedSettingsLazyImport = createFileRoute('/_protected/settings')()
const ProtectedFilesLazyImport = createFileRoute('/_protected/files')()
const ProtectedFavoritesLazyImport = createFileRoute('/_protected/favorites')()

// Create/Update Routes

const ProtectedRoute = ProtectedImport.update({
  id: '/_protected',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedIndexLazyRoute = ProtectedIndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProtectedRoute,
} as any).lazy(() =>
  import('./routes/_protected/index.lazy').then((d) => d.Route),
)

const AuthRegisterLazyRoute = AuthRegisterLazyImport.update({
  id: '/auth/register',
  path: '/auth/register',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/auth/register.lazy').then((d) => d.Route))

const AuthLoginLazyRoute = AuthLoginLazyImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/auth/login.lazy').then((d) => d.Route))

const ProtectedTrashLazyRoute = ProtectedTrashLazyImport.update({
  id: '/trash',
  path: '/trash',
  getParentRoute: () => ProtectedRoute,
} as any).lazy(() =>
  import('./routes/_protected/trash.lazy').then((d) => d.Route),
)

const ProtectedSettingsLazyRoute = ProtectedSettingsLazyImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => ProtectedRoute,
} as any).lazy(() =>
  import('./routes/_protected/settings.lazy').then((d) => d.Route),
)

const ProtectedFilesLazyRoute = ProtectedFilesLazyImport.update({
  id: '/files',
  path: '/files',
  getParentRoute: () => ProtectedRoute,
} as any).lazy(() =>
  import('./routes/_protected/files.lazy').then((d) => d.Route),
)

const ProtectedFavoritesLazyRoute = ProtectedFavoritesLazyImport.update({
  id: '/favorites',
  path: '/favorites',
  getParentRoute: () => ProtectedRoute,
} as any).lazy(() =>
  import('./routes/_protected/favorites.lazy').then((d) => d.Route),
)

const AuthConfirmEmailRoute = AuthConfirmEmailImport.update({
  id: '/auth/confirm-email',
  path: '/auth/confirm-email',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedImport
      parentRoute: typeof rootRoute
    }
    '/auth/confirm-email': {
      id: '/auth/confirm-email'
      path: '/auth/confirm-email'
      fullPath: '/auth/confirm-email'
      preLoaderRoute: typeof AuthConfirmEmailImport
      parentRoute: typeof rootRoute
    }
    '/_protected/favorites': {
      id: '/_protected/favorites'
      path: '/favorites'
      fullPath: '/favorites'
      preLoaderRoute: typeof ProtectedFavoritesLazyImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/files': {
      id: '/_protected/files'
      path: '/files'
      fullPath: '/files'
      preLoaderRoute: typeof ProtectedFilesLazyImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/settings': {
      id: '/_protected/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof ProtectedSettingsLazyImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/trash': {
      id: '/_protected/trash'
      path: '/trash'
      fullPath: '/trash'
      preLoaderRoute: typeof ProtectedTrashLazyImport
      parentRoute: typeof ProtectedImport
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginLazyImport
      parentRoute: typeof rootRoute
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/auth/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterLazyImport
      parentRoute: typeof rootRoute
    }
    '/_protected/': {
      id: '/_protected/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof ProtectedIndexLazyImport
      parentRoute: typeof ProtectedImport
    }
  }
}

// Create and export the route tree

interface ProtectedRouteChildren {
  ProtectedFavoritesLazyRoute: typeof ProtectedFavoritesLazyRoute
  ProtectedFilesLazyRoute: typeof ProtectedFilesLazyRoute
  ProtectedSettingsLazyRoute: typeof ProtectedSettingsLazyRoute
  ProtectedTrashLazyRoute: typeof ProtectedTrashLazyRoute
  ProtectedIndexLazyRoute: typeof ProtectedIndexLazyRoute
}

const ProtectedRouteChildren: ProtectedRouteChildren = {
  ProtectedFavoritesLazyRoute: ProtectedFavoritesLazyRoute,
  ProtectedFilesLazyRoute: ProtectedFilesLazyRoute,
  ProtectedSettingsLazyRoute: ProtectedSettingsLazyRoute,
  ProtectedTrashLazyRoute: ProtectedTrashLazyRoute,
  ProtectedIndexLazyRoute: ProtectedIndexLazyRoute,
}

const ProtectedRouteWithChildren = ProtectedRoute._addFileChildren(
  ProtectedRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof ProtectedRouteWithChildren
  '/auth/confirm-email': typeof AuthConfirmEmailRoute
  '/favorites': typeof ProtectedFavoritesLazyRoute
  '/files': typeof ProtectedFilesLazyRoute
  '/settings': typeof ProtectedSettingsLazyRoute
  '/trash': typeof ProtectedTrashLazyRoute
  '/auth/login': typeof AuthLoginLazyRoute
  '/auth/register': typeof AuthRegisterLazyRoute
  '/': typeof ProtectedIndexLazyRoute
}

export interface FileRoutesByTo {
  '/auth/confirm-email': typeof AuthConfirmEmailRoute
  '/favorites': typeof ProtectedFavoritesLazyRoute
  '/files': typeof ProtectedFilesLazyRoute
  '/settings': typeof ProtectedSettingsLazyRoute
  '/trash': typeof ProtectedTrashLazyRoute
  '/auth/login': typeof AuthLoginLazyRoute
  '/auth/register': typeof AuthRegisterLazyRoute
  '/': typeof ProtectedIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_protected': typeof ProtectedRouteWithChildren
  '/auth/confirm-email': typeof AuthConfirmEmailRoute
  '/_protected/favorites': typeof ProtectedFavoritesLazyRoute
  '/_protected/files': typeof ProtectedFilesLazyRoute
  '/_protected/settings': typeof ProtectedSettingsLazyRoute
  '/_protected/trash': typeof ProtectedTrashLazyRoute
  '/auth/login': typeof AuthLoginLazyRoute
  '/auth/register': typeof AuthRegisterLazyRoute
  '/_protected/': typeof ProtectedIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/auth/confirm-email'
    | '/favorites'
    | '/files'
    | '/settings'
    | '/trash'
    | '/auth/login'
    | '/auth/register'
    | '/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/auth/confirm-email'
    | '/favorites'
    | '/files'
    | '/settings'
    | '/trash'
    | '/auth/login'
    | '/auth/register'
    | '/'
  id:
    | '__root__'
    | '/_protected'
    | '/auth/confirm-email'
    | '/_protected/favorites'
    | '/_protected/files'
    | '/_protected/settings'
    | '/_protected/trash'
    | '/auth/login'
    | '/auth/register'
    | '/_protected/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  ProtectedRoute: typeof ProtectedRouteWithChildren
  AuthConfirmEmailRoute: typeof AuthConfirmEmailRoute
  AuthLoginLazyRoute: typeof AuthLoginLazyRoute
  AuthRegisterLazyRoute: typeof AuthRegisterLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  ProtectedRoute: ProtectedRouteWithChildren,
  AuthConfirmEmailRoute: AuthConfirmEmailRoute,
  AuthLoginLazyRoute: AuthLoginLazyRoute,
  AuthRegisterLazyRoute: AuthRegisterLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_protected",
        "/auth/confirm-email",
        "/auth/login",
        "/auth/register"
      ]
    },
    "/_protected": {
      "filePath": "_protected.tsx",
      "children": [
        "/_protected/favorites",
        "/_protected/files",
        "/_protected/settings",
        "/_protected/trash",
        "/_protected/"
      ]
    },
    "/auth/confirm-email": {
      "filePath": "auth/confirm-email.tsx"
    },
    "/_protected/favorites": {
      "filePath": "_protected/favorites.lazy.tsx",
      "parent": "/_protected"
    },
    "/_protected/files": {
      "filePath": "_protected/files.lazy.tsx",
      "parent": "/_protected"
    },
    "/_protected/settings": {
      "filePath": "_protected/settings.lazy.tsx",
      "parent": "/_protected"
    },
    "/_protected/trash": {
      "filePath": "_protected/trash.lazy.tsx",
      "parent": "/_protected"
    },
    "/auth/login": {
      "filePath": "auth/login.lazy.tsx"
    },
    "/auth/register": {
      "filePath": "auth/register.lazy.tsx"
    },
    "/_protected/": {
      "filePath": "_protected/index.lazy.tsx",
      "parent": "/_protected"
    }
  }
}
ROUTE_MANIFEST_END */
